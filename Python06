# 1 -  Написать программу вычисления арифметического выражения заданного строкой. Используются операции +,-,/,*. приоритет операций стандартный. Функцию eval не использовать!

# a=2; b=2
# print(a+b)

# a=1; b=2; c=3
# print( a+b*c )

# a=1; b=2; c=3
# print( (a+b)*c )

# a=1; b=2; c=3
# print( a-b*c )

# 2 - Реализовать RLE алгоритм. реализовать модуль сжатия и восстановления данных. Входные и выходные данные хранятся в отдельных файлах (в одном файлике отрывок из какой-то книги, а втором файлике — сжатая версия этого текста). 





def encode(text):
    if not text:
        return ""
    else:
        last_char = text[0]
        max_index = len(text)
        i = 1
        while i < max_index and last_char == text[i]:
            i += 1
        return last_char + str(i) + encode(text[i:])

# print(encode("abbccc"))

def decode(text):
    if not text:
        return ""
    else:
        char = text[0]
        quantity = text[1]
    return char * int(quantity) + decode(text[2:])

# print(decode("a1b2c3"))


# 3 -  ROT13 - это простой шифр подстановки букв, который заменяет букву буквой, которая идет через 13 букв после нее в алфавите. ROT13 является примером шифра Цезаря.
# Создайте функцию, которая принимает строку и возвращает строку, зашифрованную с помощью Rot13 . Если в строку включены числа или специальные символы, они должны быть возвращены как есть. Также создайте функцию, которая расшифровывает эту строку обратно (некий начальный аналог шифрования сообщений). 
# Не использовать функцию encode.

    
abc = "abcdefghijklmnopqrstuvwxyz"
m = "xgetxbetterxbyxcodingxdaily"

rt13 = lambda x: "".join([abc[(abc.find(c) + 13) % 26] for c in x])

# print(rt13(m)) 
 

# print(rt13(rt13(m))) 